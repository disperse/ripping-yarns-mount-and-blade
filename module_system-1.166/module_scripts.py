# -*- coding: cp1254 -*-
from header_common import *
from header_operations import *
from module_constants import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *
from header_map_icons import *
from ID_animations import *

####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

scripts = [

    # script_game_start:
    # This script is called when a new game is started
    # INPUT: none
    ("game_start",
     [
         (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
         (assign, "$g_player_luck", 200),
         (assign, "$g_player_luck", 200),
         (troop_set_slot, "trp_player", slot_troop_occupation, slto_kingdom_hero),
         (store_random_in_range, ":starting_training_ground", training_grounds_begin, training_grounds_end),
         (party_relocate_near_party, "p_main_party", ":starting_training_ground", 3),
         (str_store_troop_name, s5, "trp_player"),
         (party_set_name, "p_main_party", s5),
         (call_script, "script_update_party_creation_random_limits"),
         (assign, "$g_player_party_icon", -1),
         (try_for_range, ":party_no", centers_begin, centers_end),
         (party_set_note_available, ":party_no", 1),
         (try_end),
     ]),

    # script_use_item
    # INPUT: arg1 = agent_id, arg2 = instance_id
    # OUTPUT: none
    ("use_item",
     [
         (store_script_param, ":instance_id", 1),
         (store_script_param, ":user_id", 2),

         (try_begin),
         (game_in_multiplayer_mode),
         (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
         (eq, ":scene_prop_id", "spr_winch_b"),

         (multiplayer_get_my_player, ":my_player_no"),

         (this_or_next | gt, ":my_player_no", 0),
         (neg | multiplayer_is_dedicated_server),

         (ge, ":my_player_no", 0),
         (player_get_agent_id, ":my_agent_id", ":my_player_no"),
         (ge, ":my_agent_id", 0),
         (agent_is_active, ":my_agent_id"),
         (agent_get_team, ":my_team_no", ":my_agent_id"),
         (eq, ":my_team_no", 0),

         (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),
         (ge, ":user_id", 0),
         (agent_is_active, ":user_id"),
         (agent_get_player_id, ":user_player", ":user_id"),
         (str_store_player_username, s7, ":user_player"),

         (try_begin),
         (eq, ":opened_or_closed", 0),
         (display_message, "@{s7} opened the gate"),
         (else_try),
         (display_message, "@{s7} closed the gate"),
         (try_end),
         (try_end),

         (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),

         (try_begin),
         (this_or_next | eq, ":scene_prop_id", "spr_winch_b"),
         (eq, ":scene_prop_id", "spr_winch"),
         (assign, ":effected_object", "spr_portcullis"),
         (else_try),
         (this_or_next | eq, ":scene_prop_id", "spr_door_destructible"),
         (this_or_next | eq, ":scene_prop_id", "spr_castle_f_door_b"),
         (this_or_next | eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
         (this_or_next | eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),
         (this_or_next | eq, ":scene_prop_id", "spr_earth_sally_gate_left"),
         (this_or_next | eq, ":scene_prop_id", "spr_earth_sally_gate_right"),
         (this_or_next | eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),
         (this_or_next | eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),
         (this_or_next | eq, ":scene_prop_id", "spr_castle_f_door_a"),
         (this_or_next | eq, ":scene_prop_id", "spr_siege_ladder_move_6m"),
         (this_or_next | eq, ":scene_prop_id", "spr_siege_ladder_move_8m"),
         (this_or_next | eq, ":scene_prop_id", "spr_siege_ladder_move_10m"),
         (this_or_next | eq, ":scene_prop_id", "spr_siege_ladder_move_12m"),
         (eq, ":scene_prop_id", "spr_siege_ladder_move_14m"),
         (assign, ":effected_object", ":scene_prop_id"),
         (try_end),

         (assign, ":smallest_dist", -1),
         (prop_instance_get_position, pos0, ":instance_id"),
         (scene_prop_get_num_instances, ":num_instances_of_effected_object", ":effected_object"),
         (try_for_range, ":cur_instance", 0, ":num_instances_of_effected_object"),
         (scene_prop_get_instance, ":cur_instance_id", ":effected_object", ":cur_instance"),
         (prop_instance_get_position, pos1, ":cur_instance_id"),
         (get_sq_distance_between_positions, ":dist", pos0, pos1),
         (this_or_next | eq, ":smallest_dist", -1),
         (lt, ":dist", ":smallest_dist"),
         (assign, ":smallest_dist", ":dist"),
         (assign, ":effected_object_instance_id", ":cur_instance_id"),
         (try_end),

         (try_begin),
         (ge, ":instance_id", 0),
         (ge, ":smallest_dist", 0),

         (try_begin),
         (eq, ":effected_object", "spr_portcullis"),
         (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

         (try_begin),
         (eq, ":opened_or_closed", 0),  # open gate

         (scene_prop_enable_after_time, ":instance_id", 400),  # 4 seconds
         (try_begin),
         (this_or_next | multiplayer_is_server),
         (neg | game_in_multiplayer_mode),
         (prop_instance_get_position, pos0, ":effected_object_instance_id"),
         (position_move_z, pos0, 375),
         (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 400),
         (try_end),
         (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 1),

         (try_begin),
         (eq, ":scene_prop_id", "spr_winch_b"),
         (this_or_next | multiplayer_is_server),
         (neg | game_in_multiplayer_mode),
         (prop_instance_get_position, pos1, ":instance_id"),
         (prop_instance_rotate_to_position, ":instance_id", pos1, 400, 72000),
         (try_end),
         (else_try),  # close gate
         (scene_prop_enable_after_time, ":instance_id", 400),  # 4 seconds
         (try_begin),
         (this_or_next | multiplayer_is_server),
         (neg | game_in_multiplayer_mode),
         (prop_instance_get_position, pos0, ":effected_object_instance_id"),
         (position_move_z, pos0, -375),
         (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 400),
         (try_end),
         (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 0),

         (try_begin),
         (eq, ":scene_prop_id", "spr_winch_b"),
         (this_or_next | multiplayer_is_server),
         (neg | game_in_multiplayer_mode),
         (prop_instance_get_position, pos1, ":instance_id"),
         (prop_instance_rotate_to_position, ":instance_id", pos1, 400, -72000),
         (try_end),
         (try_end),
         (else_try),
         (this_or_next | eq, ":effected_object", "spr_siege_ladder_move_6m"),
         (this_or_next | eq, ":effected_object", "spr_siege_ladder_move_8m"),
         (this_or_next | eq, ":effected_object", "spr_siege_ladder_move_10m"),
         (this_or_next | eq, ":effected_object", "spr_siege_ladder_move_12m"),
         (eq, ":effected_object", "spr_siege_ladder_move_14m"),

         (try_begin),
         (eq, ":effected_object", "spr_siege_ladder_move_6m"),
         (assign, ":animation_time_drop", 120),
         (assign, ":animation_time_elevate", 240),
         (else_try),
         (eq, ":effected_object", "spr_siege_ladder_move_8m"),
         (assign, ":animation_time_drop", 140),
         (assign, ":animation_time_elevate", 280),
         (else_try),
         (eq, ":effected_object", "spr_siege_ladder_move_10m"),
         (assign, ":animation_time_drop", 160),
         (assign, ":animation_time_elevate", 320),
         (else_try),
         (eq, ":effected_object", "spr_siege_ladder_move_12m"),
         (assign, ":animation_time_drop", 190),
         (assign, ":animation_time_elevate", 360),
         (else_try),
         (eq, ":effected_object", "spr_siege_ladder_move_14m"),
         (assign, ":animation_time_drop", 230),
         (assign, ":animation_time_elevate", 400),
         (try_end),

         (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

         (try_begin),
         (scene_prop_enable_after_time, ":effected_object_instance_id", ":animation_time_elevate"),
         # 3 seconds in average
         (eq, ":opened_or_closed", 0),  # ladder at ground
         (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),
         (prop_instance_enable_physics, ":effected_object_instance_id", 0),
         (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 300),
         (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 1),
         (else_try),  # ladder at wall
         (scene_prop_enable_after_time, ":effected_object_instance_id", ":animation_time_drop"),
         # 1.5 seconds in average
         (prop_instance_get_position, pos0, ":instance_id"),

         (assign, ":smallest_dist", -1),
         (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start,
          multi_entry_points_for_usable_items_end),
         (entry_point_get_position, pos1, ":entry_point_no"),
         (get_sq_distance_between_positions, ":dist", pos0, pos1),
         (this_or_next | eq, ":smallest_dist", -1),
         (lt, ":dist", ":smallest_dist"),
         (assign, ":smallest_dist", ":dist"),
         (assign, ":nearest_entry_point", ":entry_point_no"),
         (try_end),

         (try_begin),
         (ge, ":smallest_dist", 0),
         (lt, ":smallest_dist", 22500),  # max 15m distance
         (entry_point_get_position, pos1, ":nearest_entry_point"),
         (position_rotate_x, pos1, -90),
         (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_smoke_effect_done, 0),
         (prop_instance_enable_physics, ":effected_object_instance_id", 0),
         (prop_instance_animate_to_position, ":effected_object_instance_id", pos1, 130),
         (try_end),

         (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 0),
         (try_end),
         (else_try),
         (this_or_next | eq, ":effected_object", "spr_door_destructible"),
         (this_or_next | eq, ":effected_object", "spr_castle_f_door_b"),
         (this_or_next | eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
         (this_or_next | eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),
         (this_or_next | eq, ":scene_prop_id", "spr_earth_sally_gate_left"),
         (this_or_next | eq, ":scene_prop_id", "spr_earth_sally_gate_right"),
         (this_or_next | eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),
         (this_or_next | eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),
         (eq, ":scene_prop_id", "spr_castle_f_door_a"),

         (assign, ":effected_object_instance_id", ":instance_id"),
         (scene_prop_get_slot, ":opened_or_closed", ":effected_object_instance_id", scene_prop_open_or_close_slot),

         (try_begin),
         (eq, ":opened_or_closed", 0),

         (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),

         (scene_prop_enable_after_time, ":effected_object_instance_id", 100),

         (try_begin),
         (neg | eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),
         (neg | eq, ":scene_prop_id", "spr_earth_sally_gate_left"),

         (position_rotate_z, pos0, -85),
         (else_try),
         (position_rotate_z, pos0, 85),
         (try_end),

         (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 100),

         (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 1),
         (else_try),
         (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),

         (scene_prop_enable_after_time, ":effected_object_instance_id", 100),

         (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 100),

         (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 0),
         (try_end),
         (try_end),
         (try_end),
     ]),

    ("shield_item_set_banner",
     [
         (store_script_param, ":tableau_no", 1),
         (store_script_param, ":agent_no", 2),
         (store_script_param, ":troop_no", 3),
         (call_script, "script_agent_troop_get_banner_mesh", ":agent_no", ":troop_no"),
         (cur_item_set_tableau_material, ":tableau_no", reg0),
     ]),

    #script_check_creating_ladder_dust_effect
    # INPUT: arg1 = instance_id, arg2 = remaining_time
    # OUTPUT: none
    ("check_creating_ladder_dust_effect",
     [
         (store_trigger_param_1, ":instance_id"),
         (store_trigger_param_2, ":remaining_time"),

         (try_begin),
         (lt, ":remaining_time", 15), #less then 0.15 seconds
         (gt, ":remaining_time", 3), #more than 0.03 seconds

         (scene_prop_get_slot, ":smoke_effect_done", ":instance_id", scene_prop_smoke_effect_done),
         (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

         (try_begin),
         (eq, ":smoke_effect_done", 0),
         (eq, ":opened_or_closed", 0),

         (prop_instance_get_position, pos0, ":instance_id"),

         (assign, ":smallest_dist", -1),
         (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start, multi_entry_points_for_usable_items_end),
         (entry_point_get_position, pos1, ":entry_point_no"),
         (get_sq_distance_between_positions, ":dist", pos0, pos1),
         (this_or_next|eq, ":smallest_dist", -1),
         (lt, ":dist", ":smallest_dist"),
         (assign, ":smallest_dist", ":dist"),
         (assign, ":nearest_entry_point", ":entry_point_no"),
         (try_end),

         (try_begin),
         (set_fixed_point_multiplier, 100),

         (ge, ":smallest_dist", 0),
         (lt, ":smallest_dist", 22500), #max 15m distance

         (entry_point_get_position, pos1, ":nearest_entry_point"),
         (position_rotate_x, pos1, -90),

         (prop_instance_get_scene_prop_kind, ":scene_prop_kind", ":instance_id"),
         (try_begin),
         (eq, ":scene_prop_kind", "spr_siege_ladder_move_6m"),
         (init_position, pos2),
         (position_set_z, pos2, 300),
         (position_transform_position_to_parent, pos3, pos1, pos2),
         (particle_system_burst, "psys_ladder_dust_6m", pos3, 100),
         (particle_system_burst, "psys_ladder_straw_6m", pos3, 100),
         (else_try),
         (eq, ":scene_prop_kind", "spr_siege_ladder_move_8m"),
         (init_position, pos2),
         (position_set_z, pos2, 400),
         (position_transform_position_to_parent, pos3, pos1, pos2),
         (particle_system_burst, "psys_ladder_dust_8m", pos3, 100),
         (particle_system_burst, "psys_ladder_straw_8m", pos3, 100),
         (else_try),
         (eq, ":scene_prop_kind", "spr_siege_ladder_move_10m"),
         (init_position, pos2),
         (position_set_z, pos2, 500),
         (position_transform_position_to_parent, pos3, pos1, pos2),
         (particle_system_burst, "psys_ladder_dust_10m", pos3, 100),
         (particle_system_burst, "psys_ladder_straw_10m", pos3, 100),
         (else_try),
         (eq, ":scene_prop_kind", "spr_siege_ladder_move_12m"),
         (init_position, pos2),
         (position_set_z, pos2, 600),
         (position_transform_position_to_parent, pos3, pos1, pos2),
         (particle_system_burst, "psys_ladder_dust_12m", pos3, 100),
         (particle_system_burst, "psys_ladder_straw_12m", pos3, 100),
         (else_try),
         (eq, ":scene_prop_kind", "spr_siege_ladder_move_14m"),
         (init_position, pos2),
         (position_set_z, pos2, 700),
         (position_transform_position_to_parent, pos3, pos1, pos2),
         (particle_system_burst, "psys_ladder_dust_14m", pos3, 100),
         (particle_system_burst, "psys_ladder_straw_14m", pos3, 100),
         (try_end),

         (scene_prop_set_slot, ":instance_id", scene_prop_smoke_effect_done, 1),
         (try_end),
         (try_end),
         (try_end),
     ]),

    #script_add_troop_to_cur_tableau
    # INPUT: troop_no
    # OUTPUT: none
    ("add_troop_to_cur_tableau",
     [
         (store_script_param, ":troop_no",1),

         (set_fixed_point_multiplier, 100),
         (assign, ":banner_mesh", -1),
         (troop_get_slot, ":banner_spr", ":troop_no", slot_troop_banner_scene_prop),
         (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
         (try_begin),
         (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
         (val_sub, ":banner_spr", banner_scene_props_begin),
         (store_add, ":banner_mesh", ":banner_spr", banner_meshes_begin),
         (try_end),

         (cur_tableau_clear_override_items),

         #       (cur_tableau_set_override_flags, af_override_fullhelm),
         (cur_tableau_set_override_flags, af_override_head|af_override_weapons),

         (init_position, pos2),
         (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),

         (init_position, pos5),
         (assign, ":eye_height", 162),
         (store_mul, ":camera_distance", ":troop_no", 87323),
         #       (val_mod, ":camera_distance", 5),
         (assign, ":camera_distance", 139),
         (store_mul, ":camera_yaw", ":troop_no", 124337),
         (val_mod, ":camera_yaw", 50),
         (val_add, ":camera_yaw", -25),
         (store_mul, ":camera_pitch", ":troop_no", 98123),
         (val_mod, ":camera_pitch", 20),
         (val_add, ":camera_pitch", -14),
         (assign, ":animation", "anim_stand_man"),

         ##       (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
         ##       (try_begin),
         ##         (gt, ":horse_item", 0),
         ##         (assign, ":eye_height", 210),
         ##         (cur_tableau_add_horse, ":horse_item", pos2, anim_horse_stand, 0),
         ##         (assign, ":animation", anim_ride_0),
         ##         (position_set_z, pos5, 125),
         ##         (try_begin),
         ##           (is_between, ":camera_yaw", -10, 10), #make sure horse head doesn't obstruct face.
         ##           (val_min, ":camera_pitch", -5),
         ##         (try_end),
         ##       (try_end),
         (position_set_z, pos5, ":eye_height"),

         # camera looks towards -z axis
         (position_rotate_x, pos5, -90),
         (position_rotate_z, pos5, 180),

         # now apply yaw and pitch
         (position_rotate_y, pos5, ":camera_yaw"),
         (position_rotate_x, pos5, ":camera_pitch"),
         (position_move_z, pos5, ":camera_distance", 0),
         (position_move_x, pos5, 5, 0),

         (try_begin),
         (ge, ":banner_mesh", 0),

         (init_position, pos1),
         (position_set_z, pos1, -1500),
         (position_set_x, pos1, 265),
         (position_set_y, pos1, 400),
         (position_transform_position_to_parent, pos3, pos5, pos1),
         (cur_tableau_add_mesh, ":banner_mesh", pos3, 400, 0),
         (try_end),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation" , 0),

         (cur_tableau_set_camera_position, pos5),

         (copy_position, pos8, pos5),
         (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
         (position_rotate_z, pos8, 30),
         (position_rotate_x, pos8, -60),
         (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

    #script_add_troop_to_cur_tableau_for_character
    # INPUT: troop_no
    # OUTPUT: none
    ("add_troop_to_cur_tableau_for_character",
     [
         (store_script_param, ":troop_no",1),

         (set_fixed_point_multiplier, 100),

         (cur_tableau_clear_override_items),
         (cur_tableau_set_override_flags, af_override_fullhelm),
         ##       (cur_tableau_set_override_flags, af_override_head|af_override_weapons),

         (init_position, pos2),
         (cur_tableau_set_camera_parameters, 1, 4, 8, 10, 10000),

         (init_position, pos5),
         (assign, ":cam_height", 150),
         #       (val_mod, ":camera_distance", 5),
         (assign, ":camera_distance", 360),
         (assign, ":camera_yaw", -15),
         (assign, ":camera_pitch", -18),
         (assign, ":animation", anim_stand_man),

         (position_set_z, pos5, ":cam_height"),

         # camera looks towards -z axis
         (position_rotate_x, pos5, -90),
         (position_rotate_z, pos5, 180),

         # now apply yaw and pitch
         (position_rotate_y, pos5, ":camera_yaw"),
         (position_rotate_x, pos5, ":camera_pitch"),
         (position_move_z, pos5, ":camera_distance", 0),
         (position_move_x, pos5, 5, 0),

         (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
         (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
         (try_end),
         (cur_tableau_set_camera_position, pos5),

         (copy_position, pos8, pos5),
         (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
         (position_rotate_z, pos8, 30),
         (position_rotate_x, pos8, -60),
         (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

    #script_add_troop_to_cur_tableau_for_inventory
    # INPUT: troop_no
    # OUTPUT: none
    ("add_troop_to_cur_tableau_for_inventory",
     [
         (store_script_param, ":troop_no",1),
         (store_mod, ":side", ":troop_no", 4), #side flag is inside troop_no value
         (val_div, ":troop_no", 4), #removing the flag bit
         (val_mul, ":side", 90), #to degrees

         (set_fixed_point_multiplier, 100),

         (cur_tableau_clear_override_items),

         (init_position, pos2),
         (position_rotate_z, pos2, ":side"),
         (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

         (init_position, pos5),
         (assign, ":cam_height", 105),
         #       (val_mod, ":camera_distance", 5),
         (assign, ":camera_distance", 380),
         (assign, ":camera_yaw", -15),
         (assign, ":camera_pitch", -18),
         (assign, ":animation", anim_stand_man),

         (position_set_z, pos5, ":cam_height"),

         # camera looks towards -z axis
         (position_rotate_x, pos5, -90),
         (position_rotate_z, pos5, 180),

         # now apply yaw and pitch
         (position_rotate_y, pos5, ":camera_yaw"),
         (position_rotate_x, pos5, ":camera_pitch"),
         (position_move_z, pos5, ":camera_distance", 0),
         (position_move_x, pos5, 5, 0),

         (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
         (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
         (try_end),
         (cur_tableau_set_camera_position, pos5),

         (copy_position, pos8, pos5),
         (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
         (position_rotate_z, pos8, 30),
         (position_rotate_x, pos8, -60),
         (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

    #script_add_troop_to_cur_tableau_for_profile
    # INPUT: troop_no
    # OUTPUT: none
    ("add_troop_to_cur_tableau_for_profile",
     [
         (store_script_param, ":troop_no",1),

         (set_fixed_point_multiplier, 100),

         (cur_tableau_clear_override_items),

         (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

         (init_position, pos5),
         (assign, ":cam_height", 105),
         #       (val_mod, ":camera_distance", 5),
         (assign, ":camera_distance", 380),
         (assign, ":camera_yaw", -15),
         (assign, ":camera_pitch", -18),
         (assign, ":animation", anim_stand_man),

         (position_set_z, pos5, ":cam_height"),

         # camera looks towards -z axis
         (position_rotate_x, pos5, -90),
         (position_rotate_z, pos5, 180),

         # now apply yaw and pitch
         (position_rotate_y, pos5, ":camera_yaw"),
         (position_rotate_x, pos5, ":camera_pitch"),
         (position_move_z, pos5, ":camera_distance", 0),
         (position_move_x, pos5, 5, 0),

         (profile_get_banner_id, ":profile_banner"),
         (try_begin),
         (ge, ":profile_banner", 0),
         (init_position, pos2),
         (val_add, ":profile_banner", banner_meshes_begin),
         (position_set_x, pos2, -175),
         (position_set_y, pos2, -300),
         (position_set_z, pos2, 180),
         (position_rotate_x, pos2, 90),
         (position_rotate_y, pos2, -15),
         (cur_tableau_add_mesh, ":profile_banner", pos2, 0, 0),
         (try_end),

         (init_position, pos2),
         (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
         (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
         (try_end),
         (cur_tableau_set_camera_position, pos5),

         (copy_position, pos8, pos5),
         (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
         (position_rotate_z, pos8, 30),
         (position_rotate_x, pos8, -60),
         (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

    #script_add_troop_to_cur_tableau_for_retirement
    # INPUT: type
    # OUTPUT: none
    ("add_troop_to_cur_tableau_for_retirement", [
        (store_script_param, ":type", 1),
        (cur_tableau_set_override_flags, af_override_everything),

        (try_begin),
        (eq, ":type", 0),
        (cur_tableau_add_override_item, "itm_pilgrim_hood"),
        (cur_tableau_add_override_item, "itm_pilgrim_disguise"),
        (cur_tableau_add_override_item, "itm_wrapping_boots"),
        (assign, ":animation", "anim_pose_1"),
        (else_try),
        (eq, ":type", 1),
        (cur_tableau_add_override_item, "itm_pilgrim_hood"),
        (cur_tableau_add_override_item, "itm_red_tunic"),
        (cur_tableau_add_override_item, "itm_wrapping_boots"),
        (cur_tableau_add_override_item, "itm_dagger"),
        (assign, ":animation", "anim_pose_1"),
        (else_try),
        (eq, ":type", 2),
        (cur_tableau_add_override_item, "itm_linen_tunic"),
        (cur_tableau_add_override_item, "itm_wrapping_boots"),
        (assign, ":animation", "anim_pose_2"),
        (else_try),
        (eq, ":type", 3),
        (cur_tableau_add_override_item, "itm_nomad_vest"),
        (cur_tableau_add_override_item, "itm_nomad_boots"),
        (assign, ":animation", "anim_pose_2"),
        (else_try),
        (eq, ":type", 4),
        (cur_tableau_add_override_item, "itm_leather_apron"),
        (cur_tableau_add_override_item, "itm_leather_boots"),
        (assign, ":animation", "anim_pose_3"),
        (else_try),
        (eq, ":type", 5),
        (cur_tableau_add_override_item, "itm_red_shirt"),
        (cur_tableau_add_override_item, "itm_woolen_hose"),
        (cur_tableau_add_override_item, "itm_fur_hat"),
        (assign, ":animation", "anim_pose_3"),
        (else_try),
        (eq, ":type", 6),
        (cur_tableau_add_override_item, "itm_red_gambeson"),
        (cur_tableau_add_override_item, "itm_leather_boots"),
        (cur_tableau_add_override_item, "itm_sword_medieval_c"),
        (assign, ":animation", "anim_pose_4"),
        (else_try),
        (eq, ":type", 7),
        (cur_tableau_add_override_item, "itm_nobleman_outfit"),
        (cur_tableau_add_override_item, "itm_blue_hose"),
        (cur_tableau_add_override_item, "itm_sword_medieval_c"),
        (assign, ":animation", "anim_pose_4"),
        (else_try),
        (eq, ":type", 8),
        (cur_tableau_add_override_item, "itm_courtly_outfit"),
        (cur_tableau_add_override_item, "itm_woolen_hose"),
        (cur_tableau_add_override_item, "itm_sword_medieval_c"),
        (assign, ":animation", "anim_pose_4"),
        (else_try),
        ##      (eq, ":type", 9),
        (cur_tableau_add_override_item, "itm_heraldic_mail_with_surcoat_for_tableau"),
        (cur_tableau_add_override_item, "itm_mail_boots_for_tableau"),
        (cur_tableau_add_override_item, "itm_sword_medieval_c"),
        (assign, ":animation", "anim_pose_5"),
        ##    (else_try), #not used
        ##      (cur_tableau_add_override_item, "itm_heraldic_mail_with_tabard"),
        ##      (cur_tableau_add_override_item, "itm_iron_greaves"),
        ##      (cur_tableau_add_override_item, "itm_sword_medieval_c"),
        ##      (assign, ":animation", "anim_pose_5"),
        (try_end),

        ##    (set_fixed_point_multiplier, 100),
        ##    (cur_tableau_set_background_color, 0x00000000),
        ##    (cur_tableau_set_ambient_light, 10,11,15),

        ##     (init_position, pos8),
        ##     (position_set_x, pos8, -210),
        ##     (position_set_y, pos8, 200),
        ##     (position_set_z, pos8, 300),
        ##     (cur_tableau_add_point_light, pos8, 550,500,450),


        (set_fixed_point_multiplier, 100),
        (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),
        (assign, ":cam_height", 155),
        (assign, ":camera_distance", 575),
        (assign, ":camera_yaw", -5),
        (assign, ":camera_pitch", 10),

        (init_position, pos5),
        (position_set_z, pos5, ":cam_height"),
        # camera looks towards -z axis
        (position_rotate_x, pos5, -90),
        (position_rotate_z, pos5, 180),
        # now apply yaw and pitch
        (position_rotate_y, pos5, ":camera_yaw"),
        (position_rotate_x, pos5, ":camera_pitch"),
        (position_move_z, pos5, ":camera_distance", 0),
        (position_move_x, pos5, 60, 0),

        (init_position, pos2),
        (cur_tableau_add_troop, "trp_player", pos2, ":animation", 0),
        (cur_tableau_set_camera_position, pos5),

        (copy_position, pos8, pos5),
        (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
        (position_rotate_z, pos8, 30),
        (position_rotate_x, pos8, -60),
        (cur_tableau_add_sun_light, pos8, 175,150,125),
    ]),

    #script_add_troop_to_cur_tableau_for_party
    # INPUT: troop_no
    # OUTPUT: none
    ("add_troop_to_cur_tableau_for_party",
     [
         (store_script_param, ":troop_no",1),
         (store_mod, ":hide_weapons", ":troop_no", 2), #hide_weapons flag is inside troop_no value
         (val_div, ":troop_no", 2), #removing the flag bit

         (set_fixed_point_multiplier, 100),

         (cur_tableau_clear_override_items),
         (try_begin),
         (eq, ":hide_weapons", 1),
         (cur_tableau_set_override_flags, af_override_fullhelm|af_override_head|af_override_weapons),
         (try_end),

         (init_position, pos2),
         (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),

         (init_position, pos5),
         (assign, ":cam_height", 105),
         #       (val_mod, ":camera_distance", 5),
         (assign, ":camera_distance", 450),
         (assign, ":camera_yaw", 15),
         (assign, ":camera_pitch", -18),
         (assign, ":animation", anim_stand_man),

         (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
         (try_begin),
         (gt, ":horse_item", 0),
         (eq, ":hide_weapons", 0),
         (cur_tableau_add_horse, ":horse_item", pos2, "anim_horse_stand", 0),
         (assign, ":animation", "anim_ride_0"),
         (assign, ":camera_yaw", 23),
         (assign, ":cam_height", 150),
         (assign, ":camera_distance", 550),
         (try_end),
         (position_set_z, pos5, ":cam_height"),

         # camera looks towards -z axis
         (position_rotate_x, pos5, -90),
         (position_rotate_z, pos5, 180),

         # now apply yaw and pitch
         (position_rotate_y, pos5, ":camera_yaw"),
         (position_rotate_x, pos5, ":camera_pitch"),
         (position_move_z, pos5, ":camera_distance", 0),
         (position_move_x, pos5, 5, 0),

         (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
         (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
         (try_end),
         (cur_tableau_set_camera_position, pos5),

         (copy_position, pos8, pos5),
         (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
         (position_rotate_z, pos8, 30),
         (position_rotate_x, pos8, -60),
         (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

    #script_show_multiplayer_message
    # INPUT: arg1 = multiplayer_message_type
    # OUTPUT: none
    # ("show_multiplayer_message",
    #  [
    #      (store_script_param, ":multiplayer_message_type", 1),
    #      (store_script_param, ":value", 2),
    #
    #      (assign, "$g_multiplayer_message_type", ":multiplayer_message_type"),
    #
    #      (try_begin),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_round_result_in_battle_mode),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #
    #      (try_begin), #end of round in clients
    #      (neg|multiplayer_is_server),
    #      (assign, "$g_battle_death_mode_started", 0),
    #      (try_end),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_done),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_2"),
    #      (assign, "$g_team_balance_next_round", 0),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_next),
    #      (assign, "$g_team_balance_next_round", 1),
    #      (call_script, "script_warn_player_about_auto_team_balance"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_no_need),
    #      (assign, "$g_team_balance_next_round", 0),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_capture_the_flag_score),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_returned_home),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_capture_the_flag_stole),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_poll_result),
    #      (assign, "$g_multiplayer_message_value_3", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_3"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_neutralized),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_captured),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_is_pulling),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_round_draw),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_target_destroyed),
    #
    #      (try_begin), #destroy score (condition : a target destroyed)
    #      (eq, "$g_defender_team", 0),
    #      (assign, ":attacker_team_no", 1),
    #      (else_try),
    #      (assign, ":attacker_team_no", 0),
    #      (try_end),
    #
    #      (team_get_score, ":team_score", ":attacker_team_no"),
    #      (val_add, ":team_score", 1),
    #      (call_script, "script_team_set_score", ":attacker_team_no", ":team_score"), #destroy score end
    #
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_defenders_saved_n_targets),
    #      (assign, "$g_multiplayer_message_value_1", ":value"),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (else_try),
    #      (eq, ":multiplayer_message_type", multiplayer_message_type_attackers_won_the_round),
    #      (try_begin),
    #      (eq, "$g_defender_team", 0),
    #      (assign, "$g_multiplayer_message_value_1", 1),
    #      (else_try),
    #      (assign, "$g_multiplayer_message_value_1", 0),
    #      (try_end),
    #      (start_presentation, "prsnt_multiplayer_message_1"),
    #      (try_end),
    #  ]),

    # script_draw_banner_to_region
    # Input: arg1 = troop_no, arg2 = center_pos_x, arg3 = center_pos_y, arg4 = width, arg5 = height, arg6 = stretch_width, arg7 = stretch_height, arg8 = default_scale, arg9 = max_charge_scale, arg10 = drawn_item_type
    # drawn_item_type is 0 for banners, 1 for shields, 2 for heater shield, 3 for armor
    # arguments will be used as fixed point values
    # Output: none
    ("draw_banner_to_region",
     [
         (store_script_param, ":troop_no", 1),
         (store_script_param, ":center_pos_x", 2),
         (store_script_param, ":center_pos_y", 3),
         (store_script_param, ":width", 4),
         (store_script_param, ":height", 5),
         (store_script_param, ":stretch_width", 6),
         (store_script_param, ":stretch_height", 7),
         (store_script_param, ":default_scale", 8),
         (store_script_param, ":max_charge_scale", 9),
         (store_script_param, ":drawn_item_type", 10),

         (troop_get_slot, ":bg_type", ":troop_no", slot_troop_custom_banner_bg_type),
         (val_add, ":bg_type", custom_banner_backgrounds_begin),
         (troop_get_slot, ":bg_color_1", ":troop_no", slot_troop_custom_banner_bg_color_1),
         (troop_get_slot, ":bg_color_2", ":troop_no", slot_troop_custom_banner_bg_color_2),
         (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
         (troop_get_slot, ":positioning", ":troop_no", slot_troop_custom_banner_positioning),
         (call_script, "script_get_troop_custom_banner_num_positionings", ":troop_no"),
         (assign, ":num_positionings", reg0),
         (val_mod, ":positioning", ":num_positionings"),

         (init_position, pos2),
         (position_set_x, pos2, ":width"),
         (position_set_y, pos2, ":height"),
         (assign, ":default_value", 1),
         (convert_to_fixed_point, ":default_value"),
         (position_set_z, pos2, ":default_value"),

         (init_position, pos1),
         (position_set_x, pos1, ":center_pos_x"),
         (position_set_y, pos1, ":center_pos_y"),
         (position_move_z, pos1, -20),

         (init_position, pos3),
         (position_set_x, pos3, ":default_scale"),
         (position_set_y, pos3, ":default_scale"),
         (position_set_z, pos3, ":default_value"),

         (try_begin),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_bg"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg01"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg02"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg03"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg08"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg09"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg10"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg11"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg12"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg13"),
         (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg16"),
         (eq, ":bg_type", "mesh_custom_banner_fg17"),
         (cur_tableau_add_mesh_with_scale_and_vertex_color, ":bg_type", pos1, pos2, 0, ":bg_color_1"),
         (else_try),
         (cur_tableau_add_mesh_with_scale_and_vertex_color, ":bg_type", pos1, pos3, 0, ":bg_color_1"),
         (try_end),
         (position_move_z, pos1, -20),
         (position_move_x, pos2, ":width"),
         (position_move_y, pos2, ":height"),
         (cur_tableau_add_mesh_with_scale_and_vertex_color, "mesh_custom_banner_bg", pos1, pos2, 0, ":bg_color_2"),

         (assign, ":charge_stretch", ":stretch_width"),
         (val_min, ":charge_stretch", ":stretch_height"),
         (val_min, ":charge_stretch", ":max_charge_scale"),
         (call_script, "script_get_custom_banner_charge_type_position_scale_color", "trp_player", ":positioning"),

         (try_begin),
         (this_or_next|eq, ":drawn_item_type", 2), #heater shield
         (eq, ":drawn_item_type", 3), #armor
         (assign, ":change_center_pos", 0),
         (try_begin),
         (eq, ":num_charges", 1),
         (assign, ":change_center_pos", 1),
         (else_try),
         (eq, ":num_charges", 2),
         (eq, ":positioning", 1),
         (assign, ":change_center_pos", 1),
         (else_try),
         (eq, ":num_charges", 3),
         (eq, ":positioning", 1),
         (assign, ":change_center_pos", 1),
         (try_end),
         (try_begin),
         (eq, ":change_center_pos", 1),
         (val_add, ":center_pos_y", 30),
         (try_end),
         (try_end),

         (try_begin),
         (ge, ":num_charges", 1),
         (val_mul, reg1, ":charge_stretch"),
         (val_div, reg1, 10000),
         (position_get_x, ":x", pos0),
         (position_get_y, ":y", pos0),
         (val_mul, ":x", ":stretch_width"),
         (val_mul, ":y", ":stretch_height"),
         (val_div, ":x", 10000),
         (val_div, ":y", 10000),
         (val_add, ":x", ":center_pos_x"),
         (val_add, ":y", ":center_pos_y"),
         (position_set_x, pos0, ":x"),
         (position_set_y, pos0, ":y"),
         (assign, ":scale_value", reg1),
         (convert_to_fixed_point, ":scale_value"),
         (store_mul, ":scale_value_inverse", ":scale_value", -1),
         (init_position, pos4),
         (position_set_x, pos4, ":scale_value"),
         (position_set_y, pos4, ":scale_value"),
         (position_set_z, pos4, ":scale_value"),
         (store_div, ":orientation", reg0, 256), #orientation flags
         (try_begin),
         (this_or_next|eq, ":orientation", 1),
         (eq, ":orientation", 3),
         (position_set_x, pos4, ":scale_value_inverse"),
         (try_end),
         (try_begin),
         (this_or_next|eq, ":orientation", 2),
         (eq, ":orientation", 3),
         (position_set_y, pos4, ":scale_value_inverse"),
         (try_end),
         (val_mod, reg0, 256), #remove orientation flags
         (cur_tableau_add_mesh_with_scale_and_vertex_color, reg0, pos0, pos4, 0, reg2),
         (try_end),
         (try_begin),
         (ge, ":num_charges", 2),
         (val_mul, reg4, ":charge_stretch"),
         (val_div, reg4, 10000),
         (position_get_x, ":x", pos1),
         (position_get_y, ":y", pos1),
         (val_mul, ":x", ":stretch_width"),
         (val_mul, ":y", ":stretch_height"),
         (val_div, ":x", 10000),
         (val_div, ":y", 10000),
         (val_add, ":x", ":center_pos_x"),
         (val_add, ":y", ":center_pos_y"),
         (position_set_x, pos1, ":x"),
         (position_set_y, pos1, ":y"),

         (assign, ":scale_value", reg4),
         (convert_to_fixed_point, ":scale_value"),
         (store_mul, ":scale_value_inverse", ":scale_value", -1),
         (init_position, pos4),
         (position_set_x, pos4, ":scale_value"),
         (position_set_y, pos4, ":scale_value"),
         (position_set_z, pos4, ":scale_value"),
         (store_div, ":orientation", reg3, 256), #orientation flags
         (try_begin),
         (this_or_next|eq, ":orientation", 1),
         (eq, ":orientation", 3),
         (position_set_x, pos4, ":scale_value_inverse"),
         (try_end),
         (try_begin),
         (this_or_next|eq, ":orientation", 2),
         (eq, ":orientation", 3),
         (position_set_y, pos4, ":scale_value_inverse"),
         (try_end),
         (val_mod, reg3, 256), #remove orientation flags

         (cur_tableau_add_mesh_with_scale_and_vertex_color, reg3, pos1, pos4, 0, reg5),
         (try_end),
         (try_begin),
         (ge, ":num_charges", 3),
         (val_mul, reg7, ":charge_stretch"),
         (val_div, reg7, 10000),
         (position_get_x, ":x", pos2),
         (position_get_y, ":y", pos2),
         (val_mul, ":x", ":stretch_width"),
         (val_mul, ":y", ":stretch_height"),
         (val_div, ":x", 10000),
         (val_div, ":y", 10000),
         (val_add, ":x", ":center_pos_x"),
         (val_add, ":y", ":center_pos_y"),
         (position_set_x, pos2, ":x"),
         (position_set_y, pos2, ":y"),

         (assign, ":scale_value", reg7),
         (convert_to_fixed_point, ":scale_value"),
         (store_mul, ":scale_value_inverse", ":scale_value", -1),
         (init_position, pos4),
         (position_set_x, pos4, ":scale_value"),
         (position_set_y, pos4, ":scale_value"),
         (position_set_z, pos4, ":scale_value"),
         (store_div, ":orientation", reg6, 256), #orientation flags
         (try_begin),
         (this_or_next|eq, ":orientation", 1),
         (eq, ":orientation", 3),
         (position_set_x, pos4, ":scale_value_inverse"),
         (try_end),
         (try_begin),
         (this_or_next|eq, ":orientation", 2),
         (eq, ":orientation", 3),
         (position_set_y, pos4, ":scale_value_inverse"),
         (try_end),
         (val_mod, reg6, 256), #remove orientation flags

         (cur_tableau_add_mesh_with_scale_and_vertex_color, reg6, pos2, pos4, 0, reg8),
         (try_end),
         (try_begin),
         (ge, ":num_charges", 4),
         (val_mul, reg10, ":charge_stretch"),
         (val_div, reg10, 10000),
         (position_get_x, ":x", pos3),
         (position_get_y, ":y", pos3),
         (val_mul, ":x", ":stretch_width"),
         (val_mul, ":y", ":stretch_height"),
         (val_div, ":x", 10000),
         (val_div, ":y", 10000),
         (val_add, ":x", ":center_pos_x"),
         (val_add, ":y", ":center_pos_y"),
         (position_set_x, pos3, ":x"),
         (position_set_y, pos3, ":y"),

         (assign, ":scale_value", reg10),
         (convert_to_fixed_point, ":scale_value"),
         (store_mul, ":scale_value_inverse", ":scale_value", -1),
         (init_position, pos4),
         (position_set_x, pos4, ":scale_value"),
         (position_set_y, pos4, ":scale_value"),
         (position_set_z, pos4, ":scale_value"),
         (store_div, ":orientation", reg9, 256), #orientation flags
         (try_begin),
         (this_or_next|eq, ":orientation", 1),
         (eq, ":orientation", 3),
         (position_set_x, pos4, ":scale_value_inverse"),
         (try_end),
         (try_begin),
         (this_or_next|eq, ":orientation", 2),
         (eq, ":orientation", 3),
         (position_set_y, pos4, ":scale_value_inverse"),
         (try_end),
         (val_mod, reg9, 256), #remove orientation flags

         (cur_tableau_add_mesh_with_scale_and_vertex_color, reg9, pos3, pos4, 0, reg11),
         (try_end),
     ]),

    # script_get_troop_custom_banner_num_positionings
    # Input: arg1 = troop_no
    # Output: reg0 = num_positionings
    ("get_troop_custom_banner_num_positionings",
     [
         (store_script_param, ":troop_no", 1),
         (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
         (try_begin),
         (eq, ":num_charges", 1),
         (assign, ":num_positionings", 2),
         (else_try),
         (eq, ":num_charges", 2),
         (assign, ":num_positionings", 4),
         (else_try),
         (eq, ":num_charges", 3),
         (assign, ":num_positionings", 6),
         (else_try),
         (assign, ":num_positionings", 2),
         (try_end),
         (assign, reg0, ":num_positionings"),
     ]),

    #script_agent_troop_get_banner_mesh
    # INPUT: agent_no, troop_no
    # OUTPUT: banner_mesh
    ("agent_troop_get_banner_mesh",
     [
         (store_script_param, ":agent_no", 1),
         (store_script_param, ":troop_no", 2),
         (assign, ":banner_troop", -1),
         (assign, ":banner_mesh", "mesh_banners_default_b"),
         (try_begin),
         (lt, ":agent_no", 0),
         (try_begin),
         (ge, ":troop_no", 0),
         (this_or_next|troop_slot_ge, ":troop_no", slot_troop_banner_scene_prop, 1),
         (eq, ":troop_no", "trp_player"),
         (assign, ":banner_troop", ":troop_no"),
         (else_try),
         (is_between, ":troop_no", companions_begin, companions_end),
         (assign, ":banner_troop", "trp_player"),
         (else_try),
         (assign, ":banner_mesh", "mesh_banners_default_a"),
         (try_end),
         (else_try),
         (eq, "$g_is_quick_battle", 1),
         (agent_get_team, ":agent_team", ":agent_no"),
         (try_begin),
         (eq, ":agent_team", 0),
         (assign, ":banner_mesh", "$g_quick_battle_team_0_banner"),
         (else_try),
         (assign, ":banner_mesh", "$g_quick_battle_team_1_banner"),
         (try_end),
         (else_try),
         (game_in_multiplayer_mode),
         (agent_get_group, ":agent_group", ":agent_no"),
         (try_begin),
         (neg|player_is_active, ":agent_group"),
         (agent_get_player_id, ":agent_group", ":agent_no"),
         (try_end),
         (try_begin),
         #if player banners are not allowed, use the default banner mesh
         (eq, "$g_multiplayer_allow_player_banners", 1),
         (player_is_active, ":agent_group"),
         (player_get_banner_id, ":player_banner", ":agent_group"),
         (ge, ":player_banner", 0),
         (store_add, ":banner_mesh", ":player_banner", arms_meshes_begin),
         (assign, ":already_used", 0),
         (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end), #wrong client data check
         (faction_slot_eq, ":cur_faction", slot_faction_banner, ":banner_mesh"),
         (assign, ":already_used", 1),
         (try_end),
         (eq, ":already_used", 0), #otherwise use the default banner mesh
         (else_try),
         (agent_get_team, ":agent_team", ":agent_no"),
         (team_get_faction, ":team_faction_no", ":agent_team"),

         (try_begin),
         (agent_is_human, ":agent_no"),
         (faction_get_slot, ":banner_mesh", ":team_faction_no", slot_faction_banner),
         (else_try),
         (agent_get_rider, ":rider_agent_no", ":agent_no"),
         #(agent_get_position, pos1, ":agent_no"),
         #(position_get_x, ":pos_x", pos1),
         #(position_get_y, ":pos_y", pos1),
         #(assign, reg0, ":pos_x"),
         #(assign, reg1, ":pos_y"),
         #(assign, reg2, ":agent_no"),
         #(display_message, "@{!}agent_no:{reg2}, pos_x:{reg0} , posy:{reg1}"),
         (try_begin),
         (ge, ":rider_agent_no", 0),
         (agent_is_active, ":rider_agent_no"),
         (agent_get_team, ":rider_agent_team", ":rider_agent_no"),
         (team_get_faction, ":rider_team_faction_no", ":rider_agent_team"),
         (faction_get_slot, ":banner_mesh", ":rider_team_faction_no", slot_faction_banner),
         (else_try),
         (assign, ":banner_mesh", "mesh_banners_default_c"),
         (try_end),
         (try_end),
         (try_end),
         (else_try),
         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (this_or_next|troop_slot_ge,  ":troop_id", slot_troop_banner_scene_prop, 1),
         (eq, ":troop_no", "trp_player"),
         (assign, ":banner_troop", ":troop_id"),
         (else_try),
         (agent_get_party_id, ":agent_party", ":agent_no"),
         (try_begin),
         (lt, ":agent_party", 0),
         (is_between, ":troop_id", companions_begin, companions_end),
         (main_party_has_troop, ":troop_id"),
         (assign, ":agent_party", "p_main_party"),
         (try_end),
         (ge, ":agent_party", 0),
         (party_get_template_id, ":party_template", ":agent_party"),
         (try_begin),
         (eq, ":party_template", "pt_deserters"),
         (assign, ":banner_mesh", "mesh_banners_default_c"),
         (else_try),
         (is_between, ":agent_party", centers_begin, centers_end),
         (is_between, ":troop_id", companions_begin, companions_end),
         (neq, "$talk_context", tc_tavern_talk),
         #this should be a captured companion in prison
         (assign, ":banner_troop", "trp_player"),
         (else_try),
         (is_between, ":agent_party", centers_begin, centers_end),
         (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
         (ge, ":town_lord", 0),
         (assign, ":banner_troop", ":town_lord"),
         (else_try),
         (this_or_next|party_slot_eq, ":agent_party", slot_party_type, spt_kingdom_hero_party),
         (eq, ":agent_party", "p_main_party"),
         (party_get_num_companion_stacks, ":num_stacks", ":agent_party"),
         (gt, ":num_stacks", 0),
         (party_stack_get_troop_id, ":leader_troop_id", ":agent_party", 0),
         (this_or_next|troop_slot_ge,  ":leader_troop_id", slot_troop_banner_scene_prop, 1),
         (eq, ":leader_troop_id", "trp_player"),
         (assign, ":banner_troop", ":leader_troop_id"),
         (try_end),
         (else_try), #Check if we are in a tavern
         (eq, "$talk_context", tc_tavern_talk),
         (neq, ":troop_no", "trp_player"),
         (assign, ":banner_mesh", "mesh_banners_default_d"),
         (else_try), #can't find party, this can be a town guard
         (neq, ":troop_no", "trp_player"),
         (is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
         (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
         (ge, ":town_lord", 0),
         (assign, ":banner_troop", ":town_lord"),
         (try_end),
         (try_begin),
         (ge, ":banner_troop", 0),
         (try_begin),
         (neg|troop_slot_ge, ":banner_troop", slot_troop_banner_scene_prop, 1),
         (assign, ":banner_mesh", "mesh_banners_default_b"),
         (else_try),
         (troop_get_slot, ":banner_spr", ":banner_troop", slot_troop_banner_scene_prop),
         (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
         (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
         (val_sub, ":banner_spr", banner_scene_props_begin),
         (store_add, ":banner_mesh", ":banner_spr", arms_meshes_begin),
         (try_end),
         (try_end),
         (assign, reg0, ":banner_mesh"),
     ]),

    # script_get_custom_banner_charge_type_position_scale_color
    # Input: arg1 = troop_no, arg2 = positioning_index
    # Output: reg0 = type_1
    #         reg1 = scale_1
    #         reg2 = color_1
    #         reg3 = type_2
    #         reg4 = scale_2
    #         reg5 = color_2
    #         reg6 = type_3
    #         reg7 = scale_3
    #         reg8 = color_3
    #         reg9 = type_4
    #         reg10 = scale_4
    #         reg11 = color_4
    ("get_custom_banner_charge_type_position_scale_color",
     [
         (store_script_param, ":troop_no", 1),
         (store_script_param, ":positioning", 2),
         (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
         (init_position, pos0),
         (init_position, pos1),
         (init_position, pos2),
         (init_position, pos3),

         (troop_get_slot, reg0, ":troop_no", slot_troop_custom_banner_charge_type_1),
         (val_add, reg0, custom_banner_charges_begin),
         (troop_get_slot, reg2, ":troop_no", slot_troop_custom_banner_charge_color_1),
         (troop_get_slot, reg3, ":troop_no", slot_troop_custom_banner_charge_type_2),
         (val_add, reg3, custom_banner_charges_begin),
         (troop_get_slot, reg5, ":troop_no", slot_troop_custom_banner_charge_color_2),
         (troop_get_slot, reg6, ":troop_no", slot_troop_custom_banner_charge_type_3),
         (val_add, reg6, custom_banner_charges_begin),
         (troop_get_slot, reg8, ":troop_no", slot_troop_custom_banner_charge_color_3),
         (troop_get_slot, reg9, ":troop_no", slot_troop_custom_banner_charge_type_4),
         (val_add, reg9, custom_banner_charges_begin),
         (troop_get_slot, reg11, ":troop_no", slot_troop_custom_banner_charge_color_4),

         (try_begin),
         (eq, ":num_charges", 1),
         (try_begin),
         (eq, ":positioning", 0),
         (assign, reg1, 100),
         (else_try),
         (assign, reg1, 50),
         (try_end),
         (else_try),
         (eq, ":num_charges", 2),
         (try_begin),
         (eq, ":positioning", 0),
         (position_set_y, pos0, 25),
         (position_set_y, pos1, -25),
         (assign, reg1, 40),
         (assign, reg4, 40),
         (else_try),
         (eq, ":positioning", 1),
         (position_set_x, pos0, -25),
         (position_set_x, pos1, 25),
         (assign, reg1, 40),
         (assign, reg4, 40),
         (else_try),
         (eq, ":positioning", 2),
         (position_set_x, pos0, -25),
         (position_set_y, pos0, 25),
         (position_set_x, pos1, 25),
         (position_set_y, pos1, -25),
         (assign, reg1, 50),
         (assign, reg4, 50),
         (else_try),
         (position_set_x, pos0, -25),
         (position_set_y, pos0, -25),
         (position_set_x, pos1, 25),
         (position_set_y, pos1, 25),
         (assign, reg1, 50),
         (assign, reg4, 50),
         (try_end),
         (else_try),
         (eq, ":num_charges", 3),
         (try_begin),
         (eq, ":positioning", 0),
         (position_set_y, pos0, 33),
         (position_set_y, pos2, -33),
         (assign, reg1, 30),
         (assign, reg4, 30),
         (assign, reg7, 30),
         (else_try),
         (eq, ":positioning", 1),
         (position_set_x, pos0, -33),
         (position_set_x, pos2, 33),
         (assign, reg1, 30),
         (assign, reg4, 30),
         (assign, reg7, 30),
         (else_try),
         (eq, ":positioning", 2),
         (position_set_x, pos0, -30),
         (position_set_y, pos0, 30),
         (position_set_x, pos2, 30),
         (position_set_y, pos2, -30),
         (assign, reg1, 35),
         (assign, reg4, 35),
         (assign, reg7, 35),
         (else_try),
         (eq, ":positioning", 3),
         (position_set_x, pos0, -30),
         (position_set_y, pos0, -30),
         (position_set_x, pos2, 30),
         (position_set_y, pos2, 30),
         (assign, reg1, 35),
         (assign, reg4, 35),
         (assign, reg7, 35),
         (else_try),
         (eq, ":positioning", 4),
         (position_set_x, pos0, -25),
         (position_set_y, pos0, -25),
         (position_set_y, pos1, 25),
         (position_set_x, pos2, 25),
         (position_set_y, pos2, -25),
         (assign, reg1, 50),
         (assign, reg4, 50),
         (assign, reg7, 50),
         (else_try),
         (position_set_x, pos0, -25),
         (position_set_y, pos0, 25),
         (position_set_y, pos1, -25),
         (position_set_x, pos2, 25),
         (position_set_y, pos2, 25),
         (assign, reg1, 50),
         (assign, reg4, 50),
         (assign, reg7, 50),
         (try_end),
         (else_try),
         (try_begin),
         (eq, ":positioning", 0),
         (position_set_x, pos0, -25),
         (position_set_y, pos0, 25),
         (position_set_x, pos1, 25),
         (position_set_y, pos1, 25),
         (position_set_x, pos2, -25),
         (position_set_y, pos2, -25),
         (position_set_x, pos3, 25),
         (position_set_y, pos3, -25),
         (assign, reg1, 50),
         (assign, reg4, 50),
         (assign, reg7, 50),
         (assign, reg10, 50),
         (else_try),
         (position_set_y, pos0, 30),
         (position_set_x, pos1, -30),
         (position_set_x, pos2, 30),
         (position_set_y, pos3, -30),
         (assign, reg1, 35),
         (assign, reg4, 35),
         (assign, reg7, 35),
         (assign, reg10, 35),
         (try_end),
         (try_end),
     ]),

    #script_update_party_creation_random_limits
    # INPUT: none
    ("update_party_creation_random_limits",
     [
         (store_character_level, ":player_level", "trp_player"),
         (store_mul, ":upper_limit", ":player_level", 3),
         (val_add, ":upper_limit", 25),
         (val_min, ":upper_limit", 100),
         (set_party_creation_random_limits, 0, ":upper_limit"),
         (assign, reg0, ":upper_limit"),
     ]),
]
